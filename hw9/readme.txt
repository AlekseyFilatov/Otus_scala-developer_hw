Домашнее задание

Cats-effect

Цель:

Получить самостоятельный опыт решения реальных практических задач с помощью tagless final, файберов и concurrency-примитивов.


Описание/Пошаговая инструкция выполнения домашнего задания:

В ДЗ три отдельных блока, объединенных общей тематикой. К каждому блоку в коде идут комментарии с более подробными инструкциями.
Инструкция к первому блоку (файлы Wallet.scala и WalletMain.scala):

• реализовать интерпретатор Wallet[IO] использующий файлы для хранения балансов

• реализовать смарт-конструктор для таких интерпретаторов

• проверить, что всё работает, запустив WalletMain два раза. В первый раз должно вывести 100 и 50, второй раз 150 и 100
Второй блок (файл WalletFibersApp.scala):

• описать бесконечный процесс регулярного пополнения кошелька на 100р каждые N миллисекунд

• запустить 3 фоновых файбера, в каждом должен быть запущен описанный выше процесс (у каждого файбера свой отдельный кошелек)

• описать бесконечный процесс регулярного вывода в консоль балансов всех трёх кошельков

• запустить фоновый файбер в котором будет запущен процесс вывода балансов

• добавить в основной файбер логику ожидания ввода пользователя и завершения работы после этого ввода
Третий блок (файл WalletTransferApp.scala):

• реализовать интерпретатор Wallet[IO] использующий для хранения балансов Ref из cats-effect

• реализовать смарт-конструктор для таких интерпретаторов

• проверить, что всё работает, запустив WalletTransferApp


Критерии оценки:

• написанный код, который компилируется (либо места где не компилируются отмечены комментариями с пояснениями)

• код запускается и выполняет все команды

• все побочные эффекты корректно завернуты в IO

• во втором блоке реализовано корректное завершение всех фоновых файберов через отмену

• конкурентно-безопасно реализована работа с Ref в третьем блоке